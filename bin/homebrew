#!/usr/bin/env bash

set -euo pipefail

if ! declare -F echos >/dev/null 2>&1; then
    source lib/echos.sh
fi

if ! declare -F requirers >/dev/null 2>&1; then
    source lib/requirers.sh
fi

#####
# install homebrew (CLI Packages)
#####
bot "I'm going to install Homebrew and all your packages and apps in the Brewfile."

running "checking homebrew install"
if ! command -v brew >/dev/null 2>&1; then
  action "installing homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  
  action "running Homebrew post-install"
  echo >> ~/.zprofile
  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
  eval "$(/opt/homebrew/bin/brew shellenv)"
  
  if ! command -v brew >/dev/null 2>&1; then
    error "❌ Unable to install Homebrew. Aborting!"
    exit 2
  fi
else
  ok
fi

# Ensure brew is initialized for the shell
eval "$(/opt/homebrew/bin/brew shellenv 2>/dev/null)" || true

running "updating homebrew"
brew update
ok

bot "Before installing Brew packages, we can upgrade any outdated packages."
read -r -p "Run 'brew upgrade'? [y/N] " response
if [[ "$response" =~ ^[Yy](es)?$ ]]; then
  action "Upgrading brew packages..."
  brew upgrade
  ok "Brew packages upgraded."
else
  ok "Skipped brew package upgrades."
fi

# Run Brewfile bundle
read -r -p "Run 'brew bundle'? [y/N] " response
if [[ "$response" =~ ^[Yy](es)?$ ]]; then
  running "Bundling the Brewfile..."
  brew bundle --file=./config/Brewfile
  ok "Brewfile installed."
else
  ok "Skipped brew bundle."
fi

# Cleanup
read -r -p "Run 'brew cleanup'? [y/N] " response
if [[ "$response" =~ ^[Yy](es)?$ ]]; then
  running "Cleaning up Homebrew..."
  brew cleanup
  ok "Homebrew cleaned."
else
  ok "Skipped cleanup."
fi

bot "🎉 All done!"
